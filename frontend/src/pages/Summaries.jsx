import React from "react";
import { Header } from "@/components/Header";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import { Badge } from "@/components/ui/Badge";
import { FileText, Clock, Star, BookOpen, Video, Globe, Copy, Download } from "lucide-react";

const summaries = [
  {
    id: 1,
    title: "React Server Components Explained",
    originalTitle: "Understanding React Server Components and their benefits",
    sourceType: "article",
    sourceUrl: "https://nextjs.org/docs/getting-started/react-essentials",
    keyPoints: [
      "Server Components run on the server and send rendered HTML to the client",
      "They reduce JavaScript bundle size and improve initial page load",
      "Cannot use browser-only APIs or event handlers",
      "Perfect for data fetching and static content"
    ],
    summary: "React Server Components represent a paradigm shift in how we build React applications. They execute on the server during build time or request time, allowing for better performance and SEO. The key benefit is reduced client-side JavaScript while maintaining React's component model.",
    readingTime: "3 min read",
    createdAt: "2 hours ago",
    wordCount: 450,
    rating: 4.8,
    tags: ["React", "Performance", "SSR"]
  },
  {
    id: 2,
    title: "Machine Learning Model Evaluation",
    originalTitle: "A comprehensive guide to evaluating ML models",
    sourceType: "video",
    sourceUrl: "https://youtube.com/watch?v=example",
    keyPoints: [
      "Cross-validation helps assess model generalization",
      "Precision and recall are crucial for imbalanced datasets",
      "ROC curves visualize true positive vs false positive rates",
      "Feature importance helps understand model decisions"
    ],
    summary: "Model evaluation is critical for determining whether a machine learning model will perform well on unseen data. This involves using metrics like accuracy, precision, recall, and F1-score, along with techniques like cross-validation to ensure robust performance assessment.",
    readingTime: "5 min read",
    createdAt: "1 day ago",
    wordCount: 680,
    rating: 4.9,
    tags: ["Machine Learning", "Data Science", "Evaluation"]
  },
  {
    id: 3,
    title: "CSS Grid Layout Fundamentals",
    originalTitle: "Mastering CSS Grid for modern web layouts",
    sourceType: "pdf",
    sourceUrl: "/docs/css-grid-guide.pdf",
    keyPoints: [
      "Grid creates two-dimensional layouts with rows and columns",
      "Grid tracks define the size of rows and columns",
      "Grid areas allow naming sections of the layout",
      "Implicit grids handle overflow content automatically"
    ],
    summary: "CSS Grid Layout provides a powerful system for creating complex web layouts. Unlike Flexbox which is one-dimensional, Grid works in two dimensions, making it ideal for page-level layouts and complex component arrangements.",
    readingTime: "4 min read",
    createdAt: "3 days ago",
    wordCount: 520,
    rating: 4.7,
    tags: ["CSS", "Layout", "Web Design"]
  }
];

const getSourceIcon = (type) => {
  switch (type) {
    case "video": return <Video className="h-4 w-4" />;
    case "pdf": return <FileText className="h-4 w-4" />;
    case "article": return <Globe className="h-4 w-4" />;
    default: return <BookOpen className="h-4 w-4" />;
  }
};

const getSourceColor = (type) => {
  switch (type) {
    case "video": return "text-red-500";
    case "pdf": return "text-blue-500";
    case "article": return "text-green-500";
    default: return "text-gray-500";
  }
};

const Summaries = () => {
  return (
    <div className="flex flex-col min-h-screen">
      <Header 
        title="AI Summaries" 
        subtitle="Quick overviews of your learning materials generated by AI"
        actions={
          <Button className="bg-gradient-primary hover:opacity-90 glow-primary">
            <FileText className="h-4 w-4 mr-2" />
            Create Summary
          </Button>
        }
      />
      
      <main className="flex-1 p-6 space-y-6">
        {/* Summary Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card className="bg-gradient-secondary border-border/50">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-primary">{summaries.length}</div>
              <div className="text-sm text-muted-foreground">Total Summaries</div>
            </CardContent>
          </Card>
          
          <Card className="bg-gradient-secondary border-border/50">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-500">
                {summaries.reduce((acc, s) => acc + s.wordCount, 0)}
              </div>
              <div className="text-sm text-muted-foreground">Words Summarized</div>
            </CardContent>
          </Card>
          
          <Card className="bg-gradient-secondary border-border/50">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-yellow-500">
                {Math.round(summaries.reduce((acc, s) => acc + s.rating, 0) / summaries.length * 10) / 10}
              </div>
              <div className="text-sm text-muted-foreground">Avg Rating</div>
            </CardContent>
          </Card>
          
          <Card className="bg-gradient-secondary border-border/50">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-500">
                {summaries.reduce((acc, s) => acc + parseInt(s.readingTime), 0)}m
              </div>
              <div className="text-sm text-muted-foreground">Time Saved</div>
            </CardContent>
          </Card>
        </div>

        {/* Summaries List */}
        <div className="space-y-6">
          {summaries.map((summary) => (
            <Card key={summary.id} className="card-hover bg-gradient-secondary border-border/50">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <div className={`p-1 rounded ${getSourceColor(summary.sourceType)}`}>
                        {getSourceIcon(summary.sourceType)}
                      </div>
                      <CardTitle className="text-xl">{summary.title}</CardTitle>
                    </div>
                    <CardDescription className="text-sm italic">
                      Original: {summary.originalTitle}
                    </CardDescription>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="capitalize">
                      {summary.sourceType}
                    </Badge>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-4">
                {/* Summary Text */}
                <div className="p-4 bg-card/50 rounded-lg border border-border/30">
                  <p className="text-sm leading-relaxed text-card-foreground">
                    {summary.summary}
                  </p>
                </div>

                {/* Key Points */}
                <div>
                  <h4 className="font-medium mb-2 text-foreground">Key Points:</h4>
                  <ul className="space-y-1">
                    {summary.keyPoints.map((point, index) => (
                      <li key={index} className="text-sm text-muted-foreground flex items-start gap-2">
                        <span className="text-primary mt-1">â€¢</span>
                        <span>{point}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Meta Information */}
                <div className="flex items-center gap-4 text-sm text-muted-foreground">
                  <div className="flex items-center gap-1">
                    <Clock className="h-3 w-3" />
                    {summary.readingTime}
                  </div>
                  <div className="flex items-center gap-1">
                    <FileText className="h-3 w-3" />
                    {summary.wordCount} words
                  </div>
                  <div className="flex items-center gap-1">
                    <Star className="h-3 w-3 text-yellow-500" />
                    {summary.rating}
                  </div>
                  <div>
                    Created {summary.createdAt}
                  </div>
                </div>

                {/* Tags */}
                <div className="flex flex-wrap gap-2">
                  {summary.tags.map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>

                {/* Actions */}
                <div className="flex flex-wrap gap-2 pt-2 border-t border-border/50">
                  <Button variant="outline" size="sm">
                    <BookOpen className="h-4 w-4 mr-2" />
                    View Original
                  </Button>
                  <Button variant="outline" size="sm">
                    <Copy className="h-4 w-4 mr-2" />
                    Copy Summary
                  </Button>
                  <Button variant="outline" size="sm">
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                  <Button 
                    className="bg-gradient-primary hover:opacity-90 glow-primary"
                    size="sm"
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    Generate Flashcards
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </main>
    </div>
  );
};

export default Summaries;